Operator Overloading '-' Operand

Takes in two lists of type MyList<T>, removes the the first occurence of a value between the two lists, and 
returns the new list of type MyList<T> without the duplicated values in the first list. 

Syntax:
public static MyList<T> operator - (MyList<T> list1, MyList<T> list2)

Parameters:
list1 MyList<T>
The first list being checked against.
list2 MyList<T>
The second list being used to check for duplicate values to Remove.

Return Type:
MyList<T>
Returns a new list without hte duplicated values. If no duplicated values, returns list1.

Implements:
MyList<T>.Remove(T item)

Example:
The following example defines two lists, these lists use properties and methods of the MyList<T> generic class to add, insert, and index the list. These lists are then taken in as parameters to the Minus Operand. The second list contains two duplicate values of those in the first list.
Only the first instance of each duplicate item is removed and the resulting list is removed without any of the remaining values left in the second list.

//C#
//Arrange
MyList<string> one = new MyList<string>() { "1", "3", "5", "7","9" };
MyList<string> two = new MyList<string>() { "2", "3", "4", "7" };

// What Is Expected Out 
MyList<string> expectedlist = new MyList<string>() { "1", "5", "9" };
string expected = expectedlist.ToString();

// Using the minus Operand
MyList<string> result = one - two;
string actual = result.ToString();

//Checking If What Was Expected Is the Same as What Was Returned
Assert.AreEqual(expected, actual);


